{"version":3,"sources":["utils/API.js","components/SearchForm.js","components/EmployeeTable.js","App.js","reportWebVitals.js","index.js"],"names":["API","getRandomUsers","axios","get","SearchForm","_ref","handleSearchChange","react_default","a","createElement","className","type","placeholder","aria-label","onChange","e","EmployeeTable","employeeList","map","_ref2","picture","name","phone","email","src","medium","first","last","href","App","_useState","useState","_useState2","Object","slicedToArray","employees","setEmployees","_useState3","_useState4","filteredEmployees","setFilteredEmployees","useEffect","then","res","randUsers","data","results","toConsumableArray","components_SearchForm","filterBy","target","value","console","log","filtered","filter","val","values","join","toLowerCase","indexOf","components_EmployeeTable","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"qOAGeA,EAAA,CACbC,eAAgB,WAEd,OAAOC,IAAMC,IAAI,4CCWNC,MAff,SAAAC,GAA4C,IAAtBC,EAAsBD,EAAtBC,mBACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACdH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACVC,KAAK,SACLC,YAAY,4BACZC,aAAW,SACXC,SAAU,SAAAC,GAAC,OAAIT,EAAmBS,SCY7BC,MArBf,SAAAX,GAAyC,IAAhBY,EAAgBZ,EAAhBY,aACvB,OACEV,EAAAC,EAAAC,cAAA,WAEKQ,EAAaC,IAAI,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,QAASC,EAAyBF,EAAzBE,KAAMC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,MACzC,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKe,IAAKJ,EAAQK,SAClBlB,EAAAC,EAAAC,cAAA,kBACSY,EAAKK,MADd,IACsBL,EAAKM,MAE3BpB,EAAAC,EAAAC,cAAA,0BAAkBa,GAClBf,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,KAAGmB,KAAM,UAAYL,GAArB,IAA8BA,EAA9B,WC4BTM,MApCf,WAAe,IAAAC,EAEqBC,mBAAS,IAF9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAEKI,EAFLJ,EAAA,GAAAK,EAGqCN,mBAAS,IAH9CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGaE,EAHbF,EAAA,GAyBb,OApBAG,oBAAU,WACRzC,EAAIC,iBAAiByC,KAAK,SAACC,GACzB,IAAMC,EAAYD,EAAIE,KAAKC,QAC3BV,EAAaH,OAAAc,EAAA,EAAAd,CAAIW,OAElB,IAgBDrC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCAEAF,EAAAC,EAAAC,cAACuC,EAAD,CAAY1C,mBAjBW,SAACS,GAE1B,IAAMkC,EAAWlC,EAAEmC,OAAOC,MAC1BC,QAAQC,IAAI,WAAYJ,GAExB,IAAMK,EAAWnB,EAAUoB,OAAO,SAACC,GAEjC,OAAmD,IADtCvB,OAAOwB,OAAOD,GAAKE,KAAK,IAAIC,cAC3BC,QAAQX,EAASU,iBAGjCnB,EAAqBP,OAAAc,EAAA,EAAAd,CAAIqB,OASvB/C,EAAAC,EAAAC,cAACoD,EAAD,CAAe5C,aAAcsB,MCzBpBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAlD,EAAA,GAAA2B,KAAAuB,EAAAC,KAAA,UAAqBxB,KAAK,SAAArC,GAAiD,IAA9C8D,EAA8C9D,EAA9C8D,OAAQC,EAAsC/D,EAAtC+D,OAAQC,EAA8BhE,EAA9BgE,OAAQC,EAAsBjE,EAAtBiE,OAAQC,EAAclE,EAAdkE,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,YCCdS,IAASC,OACPlE,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,WAAP,KACEnE,EAAAC,EAAAC,cAACkE,EAAD,OAEFC,SAASC,eAAe,SAM1Bf","file":"static/js/main.53f09368.chunk.js","sourcesContent":["//Utility function for calling the random user api\nimport axios from \"axios\"\n\nexport default {\n  getRandomUsers: function() {\n\n    return axios.get(\"https://randomuser.me/api/?results=100\")\n  }\n}\n","import React from \"react\";\n//search form runs the handleSearchChange function when its input form changes\nfunction SearchForm({ handleSearchChange }) {\n  return (\n    <div className=\"search\">\n      <form className=\"form-inline\">\n        <input\n          className=\"form-control\"\n          type=\"search\"\n          placeholder=\"Search Employee Directory\"\n          aria-label=\"Search\"\n          onChange={e => handleSearchChange(e)}\n        />\n      </form>\n    </div>\n  );\n}\nexport default SearchForm;","import React from \"react\";\n//Takes in employeeList from App.js\nfunction EmployeeTable({ employeeList }) {\n  return (\n    <div>\n    {/* maps over all elements of the list, grabs and renders employee info */}\n        {employeeList.map(({ picture, name, phone, email }) => {\n          return (\n            <div>\n              <img src={picture.medium} />\n              <p>\n                Name: {name.first} {name.last}\n              </p>\n              <p>Phone Number: {phone}</p>\n              <p>Email: <a href={\"mailto:\" + email}> {email} </a></p>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default EmployeeTable;\n","//dependencies\nimport React, { useState, useEffect } from \"react\";\nimport API from \"./utils/API\";\nimport SearchForm from \"./components/SearchForm\";\nimport EmployeeTable from \"./components/EmployeeTable\";\n\nfunction App() {\n  //set up useState variables\n  const [employees, setEmployees] = useState([]);\n  const [filteredEmployees, setFilteredEmployees] = useState([]);\n  //set up useEffect to call API utility function on change, then update employees\n  useEffect(() => {\n    API.getRandomUsers().then((res) => {\n      const randUsers = res.data.results;\n      setEmployees([...randUsers]);\n    });\n  }, []);\n  //function for when the input field of searchbar changes. It filters results by names that contain the searchbox value\n  const handleSearchChange = (e) => {\n    //take input of field\n    const filterBy = e.target.value;\n    console.log(\"filterby\", filterBy);\n    //filters where the target value exists\n    const filtered = employees.filter((val) => {\n      let values = Object.values(val).join(\"\").toLowerCase();\n      return values.indexOf(filterBy.toLowerCase()) !== -1;\n    });\n    //then it updates the filtered employee list\n    setFilteredEmployees([...filtered]);\n  };\n\n  return (\n    <div>\n      <h1>Employee Directory</h1>\n      {/* Search form takes in the handlesearch change function */}\n      <SearchForm handleSearchChange={handleSearchChange} />\n      {/* EmployeeTable takes in the filtered list of employees and renders them */}\n      <EmployeeTable employeeList={filteredEmployees} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}